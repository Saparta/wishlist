// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: wishlist-service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeleteWishlistItemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        *string                `protobuf:"bytes,1,opt,name=itemId,proto3,oneof" json:"itemId,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishlistItemRequest) Reset() {
	*x = DeleteWishlistItemRequest{}
	mi := &file_wishlist_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishlistItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishlistItemRequest) ProtoMessage() {}

func (x *DeleteWishlistItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishlistItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteWishlistItemRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteWishlistItemRequest) GetItemId() string {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return ""
}

func (x *DeleteWishlistItemRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type DeleteWishlistItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishlistItemResponse) Reset() {
	*x = DeleteWishlistItemResponse{}
	mi := &file_wishlist_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishlistItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishlistItemResponse) ProtoMessage() {}

func (x *DeleteWishlistItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishlistItemResponse.ProtoReflect.Descriptor instead.
func (*DeleteWishlistItemResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{1}
}

type DeleteWishlistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WishlistId    *string                `protobuf:"bytes,1,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishlistRequest) Reset() {
	*x = DeleteWishlistRequest{}
	mi := &file_wishlist_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishlistRequest) ProtoMessage() {}

func (x *DeleteWishlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishlistRequest.ProtoReflect.Descriptor instead.
func (*DeleteWishlistRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteWishlistRequest) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

func (x *DeleteWishlistRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type DeleteWishlistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteWishlistResponse) Reset() {
	*x = DeleteWishlistResponse{}
	mi := &file_wishlist_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWishlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWishlistResponse) ProtoMessage() {}

func (x *DeleteWishlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWishlistResponse.ProtoReflect.Descriptor instead.
func (*DeleteWishlistResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{3}
}

type ModifyWishlistItemRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                 // Needed to determine wishlist and access rights
	WishlistId *string                `protobuf:"bytes,9,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"` // Needed to determine wishlist and access rights
	UserId     *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`         // Needed to determine wishlist and access rights
	Name       *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`             // Editable Fields below
	Url        *string                `protobuf:"bytes,4,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Price      *float32               `protobuf:"fixed32,5,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// null = no change, False = mark ungifted, True = mark gifted
	GiftedStatus  *bool `protobuf:"varint,6,opt,name=giftedStatus,proto3,oneof" json:"giftedStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyWishlistItemRequest) Reset() {
	*x = ModifyWishlistItemRequest{}
	mi := &file_wishlist_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyWishlistItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWishlistItemRequest) ProtoMessage() {}

func (x *ModifyWishlistItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWishlistItemRequest.ProtoReflect.Descriptor instead.
func (*ModifyWishlistItemRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{4}
}

func (x *ModifyWishlistItemRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ModifyWishlistItemRequest) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

func (x *ModifyWishlistItemRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ModifyWishlistItemRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ModifyWishlistItemRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ModifyWishlistItemRequest) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ModifyWishlistItemRequest) GetGiftedStatus() bool {
	if x != nil && x.GiftedStatus != nil {
		return *x.GiftedStatus
	}
	return false
}

type ModifyWishlistItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Item          *WishlistItem          `protobuf:"bytes,1,opt,name=item,proto3,oneof" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyWishlistItemResponse) Reset() {
	*x = ModifyWishlistItemResponse{}
	mi := &file_wishlist_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyWishlistItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWishlistItemResponse) ProtoMessage() {}

func (x *ModifyWishlistItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWishlistItemResponse.ProtoReflect.Descriptor instead.
func (*ModifyWishlistItemResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyWishlistItemResponse) GetItem() *WishlistItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type ModifyWishlistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`         // Needed to determine wishlist and access rights
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"` // Needed to determine wishlist and access rights
	Title         *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`   // Editable fields below
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsPublic      *bool                  `protobuf:"varint,5,opt,name=isPublic,proto3,oneof" json:"isPublic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyWishlistRequest) Reset() {
	*x = ModifyWishlistRequest{}
	mi := &file_wishlist_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyWishlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWishlistRequest) ProtoMessage() {}

func (x *ModifyWishlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWishlistRequest.ProtoReflect.Descriptor instead.
func (*ModifyWishlistRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{6}
}

func (x *ModifyWishlistRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ModifyWishlistRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ModifyWishlistRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ModifyWishlistRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ModifyWishlistRequest) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

// New status of wishlist
type ModifyWishlistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	Title         *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsPublic      *bool                  `protobuf:"varint,5,opt,name=isPublic,proto3,oneof" json:"isPublic,omitempty"`
	CanEdit       *bool                  `protobuf:"varint,6,opt,name=canEdit,proto3,oneof" json:"canEdit,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	LastModified  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=lastModified,proto3,oneof" json:"lastModified,omitempty"`
	LastOpened    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=lastOpened,proto3,oneof" json:"lastOpened,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyWishlistResponse) Reset() {
	*x = ModifyWishlistResponse{}
	mi := &file_wishlist_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyWishlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWishlistResponse) ProtoMessage() {}

func (x *ModifyWishlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWishlistResponse.ProtoReflect.Descriptor instead.
func (*ModifyWishlistResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyWishlistResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ModifyWishlistResponse) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ModifyWishlistResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ModifyWishlistResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ModifyWishlistResponse) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *ModifyWishlistResponse) GetCanEdit() bool {
	if x != nil && x.CanEdit != nil {
		return *x.CanEdit
	}
	return false
}

func (x *ModifyWishlistResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ModifyWishlistResponse) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *ModifyWishlistResponse) GetLastOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOpened
	}
	return nil
}

type GetWishlistsSharedWithUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWishlistsSharedWithUserRequest) Reset() {
	*x = GetWishlistsSharedWithUserRequest{}
	mi := &file_wishlist_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWishlistsSharedWithUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishlistsSharedWithUserRequest) ProtoMessage() {}

func (x *GetWishlistsSharedWithUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishlistsSharedWithUserRequest.ProtoReflect.Descriptor instead.
func (*GetWishlistsSharedWithUserRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetWishlistsSharedWithUserRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type GetWishlistsSharedWithUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wishlists     []*Wishlist            `protobuf:"bytes,1,rep,name=wishlists,proto3" json:"wishlists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWishlistsSharedWithUserResponse) Reset() {
	*x = GetWishlistsSharedWithUserResponse{}
	mi := &file_wishlist_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWishlistsSharedWithUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWishlistsSharedWithUserResponse) ProtoMessage() {}

func (x *GetWishlistsSharedWithUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWishlistsSharedWithUserResponse.ProtoReflect.Descriptor instead.
func (*GetWishlistsSharedWithUserResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetWishlistsSharedWithUserResponse) GetWishlists() []*Wishlist {
	if x != nil {
		return x.Wishlists
	}
	return nil
}

type GetAllUserWishlistsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllUserWishlistsRequest) Reset() {
	*x = GetAllUserWishlistsRequest{}
	mi := &file_wishlist_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserWishlistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserWishlistsRequest) ProtoMessage() {}

func (x *GetAllUserWishlistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserWishlistsRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserWishlistsRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllUserWishlistsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type GetAllUserWishlistsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wishlists     []*Wishlist            `protobuf:"bytes,1,rep,name=wishlists,proto3" json:"wishlists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllUserWishlistsResponse) Reset() {
	*x = GetAllUserWishlistsResponse{}
	mi := &file_wishlist_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserWishlistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserWishlistsResponse) ProtoMessage() {}

func (x *GetAllUserWishlistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserWishlistsResponse.ProtoReflect.Descriptor instead.
func (*GetAllUserWishlistsResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllUserWishlistsResponse) GetWishlists() []*Wishlist {
	if x != nil {
		return x.Wishlists
	}
	return nil
}

type GetUserWishlistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	WishlistId    *string                `protobuf:"bytes,2,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserWishlistRequest) Reset() {
	*x = GetUserWishlistRequest{}
	mi := &file_wishlist_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserWishlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWishlistRequest) ProtoMessage() {}

func (x *GetUserWishlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWishlistRequest.ProtoReflect.Descriptor instead.
func (*GetUserWishlistRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserWishlistRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetUserWishlistRequest) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

type GetUserWishlistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wishlist      *Wishlist              `protobuf:"bytes,1,opt,name=wishlist,proto3,oneof" json:"wishlist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserWishlistResponse) Reset() {
	*x = GetUserWishlistResponse{}
	mi := &file_wishlist_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserWishlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWishlistResponse) ProtoMessage() {}

func (x *GetUserWishlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWishlistResponse.ProtoReflect.Descriptor instead.
func (*GetUserWishlistResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserWishlistResponse) GetWishlist() *Wishlist {
	if x != nil {
		return x.Wishlist
	}
	return nil
}

type CreateWishlistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsPublic      *bool                  `protobuf:"varint,4,opt,name=isPublic,proto3,oneof" json:"isPublic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWishlistRequest) Reset() {
	*x = CreateWishlistRequest{}
	mi := &file_wishlist_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWishlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWishlistRequest) ProtoMessage() {}

func (x *CreateWishlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWishlistRequest.ProtoReflect.Descriptor instead.
func (*CreateWishlistRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{14}
}

func (x *CreateWishlistRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CreateWishlistRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CreateWishlistRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateWishlistRequest) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

type CreateWishlistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	Title         *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsPublic      *bool                  `protobuf:"varint,5,opt,name=isPublic,proto3,oneof" json:"isPublic,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	LastModified  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastModified,proto3,oneof" json:"lastModified,omitempty"`
	LastOpened    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=lastOpened,proto3,oneof" json:"lastOpened,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWishlistResponse) Reset() {
	*x = CreateWishlistResponse{}
	mi := &file_wishlist_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWishlistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWishlistResponse) ProtoMessage() {}

func (x *CreateWishlistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWishlistResponse.ProtoReflect.Descriptor instead.
func (*CreateWishlistResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{15}
}

func (x *CreateWishlistResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CreateWishlistResponse) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CreateWishlistResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CreateWishlistResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateWishlistResponse) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *CreateWishlistResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateWishlistResponse) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *CreateWishlistResponse) GetLastOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOpened
	}
	return nil
}

type ClearWishlistItemsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	WishlistId    *string                `protobuf:"bytes,2,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearWishlistItemsRequest) Reset() {
	*x = ClearWishlistItemsRequest{}
	mi := &file_wishlist_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearWishlistItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearWishlistItemsRequest) ProtoMessage() {}

func (x *ClearWishlistItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearWishlistItemsRequest.ProtoReflect.Descriptor instead.
func (*ClearWishlistItemsRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{16}
}

func (x *ClearWishlistItemsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ClearWishlistItemsRequest) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

type ClearWishlistItemsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearWishlistItemsResponse) Reset() {
	*x = ClearWishlistItemsResponse{}
	mi := &file_wishlist_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearWishlistItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearWishlistItemsResponse) ProtoMessage() {}

func (x *ClearWishlistItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearWishlistItemsResponse.ProtoReflect.Descriptor instead.
func (*ClearWishlistItemsResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{17}
}

type AddWishlistItemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	WishlistId    *string                `protobuf:"bytes,2,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"`
	Name          *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url           *string                `protobuf:"bytes,4,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Price         *float32               `protobuf:"fixed32,5,opt,name=price,proto3,oneof" json:"price,omitempty"`
	IsGifted      *bool                  `protobuf:"varint,6,opt,name=isGifted,proto3,oneof" json:"isGifted,omitempty"`
	GiftedBy      *string                `protobuf:"bytes,7,opt,name=giftedBy,proto3,oneof" json:"giftedBy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddWishlistItemRequest) Reset() {
	*x = AddWishlistItemRequest{}
	mi := &file_wishlist_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddWishlistItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishlistItemRequest) ProtoMessage() {}

func (x *AddWishlistItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishlistItemRequest.ProtoReflect.Descriptor instead.
func (*AddWishlistItemRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{18}
}

func (x *AddWishlistItemRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AddWishlistItemRequest) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

func (x *AddWishlistItemRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AddWishlistItemRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *AddWishlistItemRequest) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AddWishlistItemRequest) GetIsGifted() bool {
	if x != nil && x.IsGifted != nil {
		return *x.IsGifted
	}
	return false
}

func (x *AddWishlistItemRequest) GetGiftedBy() string {
	if x != nil && x.GiftedBy != nil {
		return *x.GiftedBy
	}
	return ""
}

type AddWishlistItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	WishlistId    *string                `protobuf:"bytes,3,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"`
	Name          *string                `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url           *string                `protobuf:"bytes,5,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Price         *float32               `protobuf:"fixed32,6,opt,name=price,proto3,oneof" json:"price,omitempty"`
	IsGifted      *bool                  `protobuf:"varint,7,opt,name=isGifted,proto3,oneof" json:"isGifted,omitempty"`
	GiftedBy      *string                `protobuf:"bytes,8,opt,name=giftedBy,proto3,oneof" json:"giftedBy,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddWishlistItemResponse) Reset() {
	*x = AddWishlistItemResponse{}
	mi := &file_wishlist_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddWishlistItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWishlistItemResponse) ProtoMessage() {}

func (x *AddWishlistItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWishlistItemResponse.ProtoReflect.Descriptor instead.
func (*AddWishlistItemResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{19}
}

func (x *AddWishlistItemResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AddWishlistItemResponse) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AddWishlistItemResponse) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

func (x *AddWishlistItemResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AddWishlistItemResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *AddWishlistItemResponse) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AddWishlistItemResponse) GetIsGifted() bool {
	if x != nil && x.IsGifted != nil {
		return *x.IsGifted
	}
	return false
}

func (x *AddWishlistItemResponse) GetGiftedBy() string {
	if x != nil && x.GiftedBy != nil {
		return *x.GiftedBy
	}
	return ""
}

func (x *AddWishlistItemResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ItemMarkingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	ItemId        *string                `protobuf:"bytes,2,opt,name=itemId,proto3,oneof" json:"itemId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemMarkingRequest) Reset() {
	*x = ItemMarkingRequest{}
	mi := &file_wishlist_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemMarkingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMarkingRequest) ProtoMessage() {}

func (x *ItemMarkingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMarkingRequest.ProtoReflect.Descriptor instead.
func (*ItemMarkingRequest) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{20}
}

func (x *ItemMarkingRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ItemMarkingRequest) GetItemId() string {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return ""
}

type ItemMarkingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemMarkingResponse) Reset() {
	*x = ItemMarkingResponse{}
	mi := &file_wishlist_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemMarkingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMarkingResponse) ProtoMessage() {}

func (x *ItemMarkingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMarkingResponse.ProtoReflect.Descriptor instead.
func (*ItemMarkingResponse) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{21}
}

func (x *ItemMarkingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Wishlist struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=userId,proto3,oneof" json:"userId,omitempty"`
	Title         *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsPublic      *bool                  `protobuf:"varint,5,opt,name=isPublic,proto3,oneof" json:"isPublic,omitempty"`
	CanEdit       *bool                  `protobuf:"varint,10,opt,name=canEdit,proto3,oneof" json:"canEdit,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	LastModified  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastModified,proto3,oneof" json:"lastModified,omitempty"`
	LastOpened    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=lastOpened,proto3,oneof" json:"lastOpened,omitempty"`
	SharedWith    []string               `protobuf:"bytes,11,rep,name=sharedWith,proto3" json:"sharedWith,omitempty"`
	Items         []*WishlistItem        `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Wishlist) Reset() {
	*x = Wishlist{}
	mi := &file_wishlist_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Wishlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wishlist) ProtoMessage() {}

func (x *Wishlist) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wishlist.ProtoReflect.Descriptor instead.
func (*Wishlist) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{22}
}

func (x *Wishlist) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Wishlist) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Wishlist) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Wishlist) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Wishlist) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *Wishlist) GetCanEdit() bool {
	if x != nil && x.CanEdit != nil {
		return *x.CanEdit
	}
	return false
}

func (x *Wishlist) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Wishlist) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Wishlist) GetLastOpened() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOpened
	}
	return nil
}

func (x *Wishlist) GetSharedWith() []string {
	if x != nil {
		return x.SharedWith
	}
	return nil
}

func (x *Wishlist) GetItems() []*WishlistItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type WishlistItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Url           *string                `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
	Price         *float32               `protobuf:"fixed32,4,opt,name=price,proto3,oneof" json:"price,omitempty"`
	IsGifted      *bool                  `protobuf:"varint,8,opt,name=isGifted,proto3,oneof" json:"isGifted,omitempty"`
	GiftedBy      *string                `protobuf:"bytes,9,opt,name=giftedBy,proto3,oneof" json:"giftedBy,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	WishlistId    *string                `protobuf:"bytes,11,opt,name=wishlistId,proto3,oneof" json:"wishlistId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WishlistItem) Reset() {
	*x = WishlistItem{}
	mi := &file_wishlist_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WishlistItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishlistItem) ProtoMessage() {}

func (x *WishlistItem) ProtoReflect() protoreflect.Message {
	mi := &file_wishlist_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishlistItem.ProtoReflect.Descriptor instead.
func (*WishlistItem) Descriptor() ([]byte, []int) {
	return file_wishlist_service_proto_rawDescGZIP(), []int{23}
}

func (x *WishlistItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *WishlistItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WishlistItem) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *WishlistItem) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WishlistItem) GetIsGifted() bool {
	if x != nil && x.IsGifted != nil {
		return *x.IsGifted
	}
	return false
}

func (x *WishlistItem) GetGiftedBy() string {
	if x != nil && x.GiftedBy != nil {
		return *x.GiftedBy
	}
	return ""
}

func (x *WishlistItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WishlistItem) GetWishlistId() string {
	if x != nil && x.WishlistId != nil {
		return *x.WishlistId
	}
	return ""
}

var File_wishlist_service_proto protoreflect.FileDescriptor

var file_wishlist_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1c, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x19, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x67, 0x69,
	0x66, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x53, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x84, 0x04,
	0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05,
	0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x08, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x53, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x77, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x77, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x77,
	0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x09, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x58, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x77,
	0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xd9, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x22, 0x77, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x41, 0x64,
	0x64, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x47,
	0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x22, 0xa0, 0x03, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x08, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc1, 0x04, 0x0a,
	0x08, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x08, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x22, 0xf3, 0x02, 0x0a, 0x0c, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x08, 0x32, 0x84, 0x07, 0x0a, 0x0f, 0x57, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x57,
	0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57,
	0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wishlist_service_proto_rawDescOnce sync.Once
	file_wishlist_service_proto_rawDescData = file_wishlist_service_proto_rawDesc
)

func file_wishlist_service_proto_rawDescGZIP() []byte {
	file_wishlist_service_proto_rawDescOnce.Do(func() {
		file_wishlist_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wishlist_service_proto_rawDescData)
	})
	return file_wishlist_service_proto_rawDescData
}

var file_wishlist_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_wishlist_service_proto_goTypes = []any{
	(*DeleteWishlistItemRequest)(nil),          // 0: proto.DeleteWishlistItemRequest
	(*DeleteWishlistItemResponse)(nil),         // 1: proto.DeleteWishlistItemResponse
	(*DeleteWishlistRequest)(nil),              // 2: proto.DeleteWishlistRequest
	(*DeleteWishlistResponse)(nil),             // 3: proto.DeleteWishlistResponse
	(*ModifyWishlistItemRequest)(nil),          // 4: proto.ModifyWishlistItemRequest
	(*ModifyWishlistItemResponse)(nil),         // 5: proto.ModifyWishlistItemResponse
	(*ModifyWishlistRequest)(nil),              // 6: proto.ModifyWishlistRequest
	(*ModifyWishlistResponse)(nil),             // 7: proto.ModifyWishlistResponse
	(*GetWishlistsSharedWithUserRequest)(nil),  // 8: proto.GetWishlistsSharedWithUserRequest
	(*GetWishlistsSharedWithUserResponse)(nil), // 9: proto.GetWishlistsSharedWithUserResponse
	(*GetAllUserWishlistsRequest)(nil),         // 10: proto.GetAllUserWishlistsRequest
	(*GetAllUserWishlistsResponse)(nil),        // 11: proto.GetAllUserWishlistsResponse
	(*GetUserWishlistRequest)(nil),             // 12: proto.GetUserWishlistRequest
	(*GetUserWishlistResponse)(nil),            // 13: proto.GetUserWishlistResponse
	(*CreateWishlistRequest)(nil),              // 14: proto.CreateWishlistRequest
	(*CreateWishlistResponse)(nil),             // 15: proto.CreateWishlistResponse
	(*ClearWishlistItemsRequest)(nil),          // 16: proto.ClearWishlistItemsRequest
	(*ClearWishlistItemsResponse)(nil),         // 17: proto.ClearWishlistItemsResponse
	(*AddWishlistItemRequest)(nil),             // 18: proto.AddWishlistItemRequest
	(*AddWishlistItemResponse)(nil),            // 19: proto.AddWishlistItemResponse
	(*ItemMarkingRequest)(nil),                 // 20: proto.ItemMarkingRequest
	(*ItemMarkingResponse)(nil),                // 21: proto.ItemMarkingResponse
	(*Wishlist)(nil),                           // 22: proto.Wishlist
	(*WishlistItem)(nil),                       // 23: proto.WishlistItem
	(*timestamppb.Timestamp)(nil),              // 24: google.protobuf.Timestamp
}
var file_wishlist_service_proto_depIdxs = []int32{
	23, // 0: proto.ModifyWishlistItemResponse.item:type_name -> proto.WishlistItem
	24, // 1: proto.ModifyWishlistResponse.createdAt:type_name -> google.protobuf.Timestamp
	24, // 2: proto.ModifyWishlistResponse.lastModified:type_name -> google.protobuf.Timestamp
	24, // 3: proto.ModifyWishlistResponse.lastOpened:type_name -> google.protobuf.Timestamp
	22, // 4: proto.GetWishlistsSharedWithUserResponse.wishlists:type_name -> proto.Wishlist
	22, // 5: proto.GetAllUserWishlistsResponse.wishlists:type_name -> proto.Wishlist
	22, // 6: proto.GetUserWishlistResponse.wishlist:type_name -> proto.Wishlist
	24, // 7: proto.CreateWishlistResponse.createdAt:type_name -> google.protobuf.Timestamp
	24, // 8: proto.CreateWishlistResponse.lastModified:type_name -> google.protobuf.Timestamp
	24, // 9: proto.CreateWishlistResponse.lastOpened:type_name -> google.protobuf.Timestamp
	24, // 10: proto.AddWishlistItemResponse.createdAt:type_name -> google.protobuf.Timestamp
	24, // 11: proto.Wishlist.createdAt:type_name -> google.protobuf.Timestamp
	24, // 12: proto.Wishlist.lastModified:type_name -> google.protobuf.Timestamp
	24, // 13: proto.Wishlist.lastOpened:type_name -> google.protobuf.Timestamp
	23, // 14: proto.Wishlist.items:type_name -> proto.WishlistItem
	24, // 15: proto.WishlistItem.createdAt:type_name -> google.protobuf.Timestamp
	14, // 16: proto.WishlistService.CreateWishlist:input_type -> proto.CreateWishlistRequest
	18, // 17: proto.WishlistService.AddWishlistItem:input_type -> proto.AddWishlistItemRequest
	16, // 18: proto.WishlistService.ClearWishlistItems:input_type -> proto.ClearWishlistItemsRequest
	12, // 19: proto.WishlistService.GetUserWishlist:input_type -> proto.GetUserWishlistRequest
	10, // 20: proto.WishlistService.GetAllUserWishlists:input_type -> proto.GetAllUserWishlistsRequest
	8,  // 21: proto.WishlistService.GetWishlistsSharedWithUser:input_type -> proto.GetWishlistsSharedWithUserRequest
	6,  // 22: proto.WishlistService.ModifyWishlist:input_type -> proto.ModifyWishlistRequest
	4,  // 23: proto.WishlistService.ModifyWishlistItem:input_type -> proto.ModifyWishlistItemRequest
	2,  // 24: proto.WishlistService.DeleteWishlist:input_type -> proto.DeleteWishlistRequest
	0,  // 25: proto.WishlistService.DeleteWishlistItem:input_type -> proto.DeleteWishlistItemRequest
	15, // 26: proto.WishlistService.CreateWishlist:output_type -> proto.CreateWishlistResponse
	19, // 27: proto.WishlistService.AddWishlistItem:output_type -> proto.AddWishlistItemResponse
	17, // 28: proto.WishlistService.ClearWishlistItems:output_type -> proto.ClearWishlistItemsResponse
	13, // 29: proto.WishlistService.GetUserWishlist:output_type -> proto.GetUserWishlistResponse
	11, // 30: proto.WishlistService.GetAllUserWishlists:output_type -> proto.GetAllUserWishlistsResponse
	9,  // 31: proto.WishlistService.GetWishlistsSharedWithUser:output_type -> proto.GetWishlistsSharedWithUserResponse
	7,  // 32: proto.WishlistService.ModifyWishlist:output_type -> proto.ModifyWishlistResponse
	5,  // 33: proto.WishlistService.ModifyWishlistItem:output_type -> proto.ModifyWishlistItemResponse
	3,  // 34: proto.WishlistService.DeleteWishlist:output_type -> proto.DeleteWishlistResponse
	1,  // 35: proto.WishlistService.DeleteWishlistItem:output_type -> proto.DeleteWishlistItemResponse
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_wishlist_service_proto_init() }
func file_wishlist_service_proto_init() {
	if File_wishlist_service_proto != nil {
		return
	}
	file_wishlist_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[12].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[13].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[16].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[18].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[19].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[20].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[22].OneofWrappers = []any{}
	file_wishlist_service_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wishlist_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wishlist_service_proto_goTypes,
		DependencyIndexes: file_wishlist_service_proto_depIdxs,
		MessageInfos:      file_wishlist_service_proto_msgTypes,
	}.Build()
	File_wishlist_service_proto = out.File
	file_wishlist_service_proto_rawDesc = nil
	file_wishlist_service_proto_goTypes = nil
	file_wishlist_service_proto_depIdxs = nil
}
